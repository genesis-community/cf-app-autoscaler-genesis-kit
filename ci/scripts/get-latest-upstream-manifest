#!/usr/bin/env bash

set -e
set -o pipefail
export TERM=xterm-256color

header() {
  echo
  echo "================================================================================"
  echo "$1"
  echo "--------------------------------------------------------------------------------"
  echo
}

bail() {
  echo >&2 "[1;31m[ERROR][0m $*  Did you misconfigure Concourse?"
  exit 2
}

test -n "${GIT_EMAIL:-}"      || bail "GIT_EMAIL must be set to an email address to use for Git commits."
test -n "${GIT_NAME:-}"       || bail "GIT_NAME must be set to something; it will be used for Git commits."

# Configuration Section for different upstreams

# Reference: commit of version based
ref=$(cat upstream/.git/ref) # commit-based ref
upstream_url="https://github.com/${UPSTREAM_REPO:?UPSTREAM_REPO not exported}/tree/${ref}" #commit-based ref
if [[ $ref =~ ^v ]] ; then
	ref=$(cut -b 2- <<< "$ref") # version-based ref
	upstream_url="https://github.com/${UPSTREAM_REPO:?UPSTREAM_REPO not exported}/releases/tag/v${ref}" #version-based ref
fi

# Package paths
src_path="upstream"
dst_path="git/${UPSTREAM_PATH}" #relative to the git path

echo "CHECKING git status"
git -C git status

header "Bumping embedded $UPSTREAM_PATH to $ref"

[[ -d "$dst_path" ]] || bail "Could not find upstream directory '$UPSTREAM_PATH' in the git repo"

echo "Clearing out existing files in $dst_path"
rm -rf "${dst_path:?Destination path not set}"

echo
echo "Copying files from $src_path to $dst_path"

cat <<'PERL' | perl - "$src_path" "$dst_path"
use strict;
use warnings;
use Cwd qw(cwd chdir);
use File::Basename qw(dirname);
use File::Path qw(mkpath);

sub find_files {
  my ($file_array_ref, @paths) = @_;
  for my $path (@paths) {
    if (-d $path) {
      find_files($file_array_ref, glob("$path/*"));
    } elsif (-f $path || -l $path) {
      push @$file_array_ref, $path =~ s{^\./}{}r;
    }
  }
}

my ($src_path, $dst_path) = @ARGV;
my $root_path = cwd;
my @files = ();
chdir("$src_path") or die "Could not change to $src_path: $!";

my $include_paths = ($ENV{INCLUDE_FILTER}||'<nil>') ne '<nil>' ? $ENV{INCLUDE_FILTER} : '.';
my @paths = ();
push @paths, glob $_ for grep {$_} split(/\|/, $include_paths);
printf(
  "- Only including files under the following paths due to inclusion filter:%s\n\n",
  join("\n    ", '', grep {$_} split(/\|/, $include_paths))
) if $include_paths ne '.';

find_files(\@files, @paths);
printf(
  "- Found %d files in upstream repository\n",
  scalar @files
);

if (($ENV{EXCLUDE_FILTER}||'<nil>') ne '<nil>') {
  my @exclude = ();
  my @exclude_paths = split(/\|/, $ENV{EXCLUDE_FILTER});
  find_files(\@exclude, @exclude_paths);

  if (@exclude) {
    printf(
      "- Excluding %d files due to exclusion filter '%s':%s\n\n",
      scalar @exclude,
      $ENV{EXCLUDE_FILTER},
      join("\n    ", '', @exclude)
    );
    my %exclude = map {$_ => 1} @exclude;
    @files = grep {!$exclude{$_}} @files;
  } elsif ($exclude_paths[0] ne '.') {
    printf(
      "- No files to exclude found matching the exclusion filter '%s'\n\n",
      $ENV{EXCLUDE_FILTER},
    );
  }
}

printf(
  "- Copying %d files from %s to %s...\n",
  scalar @files,
  $src_path,
  $dst_path
);

chdir $root_path or die "Could not change to $root_path: $!";

# Copy files from source to destination, making sure the direcory exists and permissions are preserved
for my $file (sort @files) {
  my $src = "$src_path/$file";
  my $dst = "$dst_path/$file";
  my $dir = dirname($dst);

  if (! -d $dir) {
    printf("\n    creating directory %s\n", $dir);
    mkpath $dir or die "Could not create directory $dir: $!";
  }
  printf("    copying ");
  system("cp -pv '$src' '$dst'") == 0 or die "Could not copy $src to $dst: $!";
}
exit 0;
PERL

header "Comparing changes from upstream"
if [[ -n "$(git -C git status --porcelain)" ]] ; then
	ts="$(date -u +"%Y-%b-%d %H:%M:%S %Z")"
	cat > git/overlay/upstream_version.yml <<EOF
exodus:
  ${UPSTREAM_PATH}-version: $ref
  ${UPSTREAM_PATH}-date:    $ts
  ${UPSTREAM_PATH}-url:     $upstream_url
EOF
	echo "Successfully updated $UPSTREAM_PATH to commit hash $ref"
else
	echo "No changes detected - aborting upstream synchronization."
	exit 2
fi

git -C git diff --color=always "$UPSTREAM_PATH" | cat

header "Recreate spec-test results to validate upstream"
pushd git/spec > /dev/null
  rm -rf results/ credhub/
  ACK_GINKGO_RC=true ginkgo -p -failFast .
popd

header "Spec file changes:"
git -C git diff --color=always spec/results/ | cat

header "Commiting updates to git"
git config --global user.name  "${GIT_NAME}"
git config --global user.email "${GIT_EMAIL}"

pushd git &>/dev/null
git add "$UPSTREAM_PATH"
git add spec/
git add overlay/upstream_version.yml
git commit -m "Update to $UPSTREAM_REPO@$ref"

# The following is done to ensure a clean push to the develop branch, while
# basing the input on a version that last passed the spec-tests.
https_url="$(git remote -v | grep '(fetch)' | sed -e 's/.*github.com:\(.*\) (fetch)/https:\/\/github.com\/\1/')"
git remote add live "$https_url"
git pull --rebase=merges live develop -X theirs --no-edit
git remote remove live

popd &>/dev/null
